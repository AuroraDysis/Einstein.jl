var documenterSearchIndex = {"docs":
[{"location":"cheb/#Chebyshev-pseudospectral-method","page":"Chebyshev Suite","title":"Chebyshev pseudospectral method","text":"","category":"section"},{"location":"cheb/","page":"Chebyshev Suite","title":"Chebyshev Suite","text":"Modules = [GRSuite.ChebyshevSuite]","category":"page"},{"location":"cheb/","page":"Chebyshev Suite","title":"Chebyshev Suite","text":"Modules = [GRSuite.ChebyshevSuite]","category":"page"},{"location":"cheb/#GRSuite.ChebyshevSuite.cheb1_grid-Union{Tuple{TI}, Tuple{TR}, Tuple{Type{TR}, TI}} where {TR<:AbstractFloat, TI<:Integer}","page":"Chebyshev Suite","title":"GRSuite.ChebyshevSuite.cheb1_grid","text":"cheb1_grid(::Type{TR}, n::TI) where {TR<:AbstractFloat,TI<:Integer}\ncheb1_grid(::Type{TR}, n::TI, x_min::TR, x_max::TR) where {TR<:AbstractFloat,TI<:Integer}\n\nGenerate Chebyshev points of the first kind.\n\nArguments\n\nTR: Type parameter for the grid points (e.g., Float64)\nn: Number of grid points\nx_min: (Optional) Lower bound of the mapped interval\nx_max: (Optional) Upper bound of the mapped interval\n\nReturns\n\nVector of n Chebyshev points of the first kind\n\nMathematical Details\n\nFor the standard interval [-1,1]: x_k = -cosleft(frac(2k + 1)pi2nright) quad k = 01ldotsn-1\n\nFor mapped interval [xmin,xmax]: x_mapped = fracx_max + x_min2 + fracx_min - x_max2x_k\n\nChebyshev points of the first kind are the roots of Chebyshev polynomials of the first kind.\n\nExamples\n\n# Generate 5 points on [-1,1]\nx = cheb1_grid(Float64, 5)\n\n# Generate 5 points mapped to [0,1]\nx = cheb1_grid(Float64, 5, 0.0, 1.0)\n\n\n\n\n\n","category":"method"},{"location":"cheb/#GRSuite.ChebyshevSuite.cheb2_asmat-Union{Tuple{TI}, Tuple{TR}, Tuple{Type{TR}, TI}} where {TR<:AbstractFloat, TI<:Integer}","page":"Chebyshev Suite","title":"GRSuite.ChebyshevSuite.cheb2_asmat","text":"cheb2_asmat(::Type{TR}, n::TI) where {TR<:AbstractFloat,TI<:Integer}\n\nGenerate the analysis and synthesis matrices for Chebyshev spectral methods.\n\nArguments\n\nTR: Type parameter for the matrix elements (e.g., Float64)\nn: Size of the matrices (n×n)\n\nReturns\n\nTuple{Matrix{TR}, Matrix{TR}}: A tuple containing:\nAnalysis matrix A (n×n)\nSynthesis matrix S (n×n)\n\nMathematical Background\n\nThe analysis and synthesis matrices are used for transforming between physical and spectral spaces in Chebyshev spectral methods.\n\nFor a function f(x) evaluated at Chebyshev points, these matrices allow:\n\nTransformation to spectral coefficients: hatf = Af\nTransformation back to physical space: f = Shatf\n\nThe matrices are constructed using:\n\nS_ij = epsilon_j cosleft(fracpi i jN-1right)\n\nA_ji = frac2c_ic_jN-1S_ij\n\nwhere:\n\nc_k = begincases 12  k=0 text or  k=N-1  1  textotherwise endcases\nepsilon_j = (-1)^j\nij = 0ldotsN-1\n\nExamples\n\n# Generate 8×8 analysis and synthesis matrices with Float64 precision\nA, S = cheb2_asmat(Float64, 8)\n\n# Transform function values to spectral coefficients\nf_values = [sin(x) for x in cheb2_grid(Float64, 8)]\nf_coeffs = A * f_values\n\n# Transform back to physical space\nf_recovered = S * f_coeffs\n\nSee also: cheb2_grid\n\n\n\n\n\n","category":"method"},{"location":"cheb/#GRSuite.ChebyshevSuite.cheb2_coeffs_intmat-Union{Tuple{TI}, Tuple{TR}, Tuple{Type{TR}, TI}} where {TR<:AbstractFloat, TI<:Integer}","page":"Chebyshev Suite","title":"GRSuite.ChebyshevSuite.cheb2_coeffs_intmat","text":"cheb2_coeffs_intmat(::Type{TR}, n::TI) where {TR<:AbstractFloat,TI<:Integer}\ncheb2_coeffs_intmat(::Type{TR}, n::TI, x_min::TR, x_max::TR) where {TR<:AbstractFloat,TI<:Integer}\n\nGenerate the Chebyshev coefficient integration matrix for spectral integration.\n\nArguments\n\nTR: Type parameter for the matrix elements (e.g., Float64)\nn: Size of the matrix (n×n)\nx_min: (Optional) Lower bound of the integration interval\nx_max: (Optional) Upper bound of the integration interval\n\nReturns\n\nMatrix{TR}: The integration matrix B (n×n)\n\nMathematical Background\n\nThe integration matrix B operates on Chebyshev spectral coefficients to compute the coefficients of the indefinite integral. For a function expressed in the  Chebyshev basis:\n\nf(x) = sum_k=0^N-1 a_k T_k(x)\n\nThe indefinite integral's coefficients b_k in:\n\nint f(x)dx = sum_k=0^N-1 b_k T_k(x) + C\n\nare computed using the matrix B: b = Ba\n\nThe matrix elements are derived from the integration relation of Chebyshev polynomials:\n\nint T_n(x)dx = frac12left(fracT_n+1(x)n+1 - fracT_n-1(x)n-1right)\n\nWhen x_min and x_max are provided, the matrix is scaled for integration over [xmin, xmax].\n\nExamples\n\n# Generate 8×8 integration matrix for [-1,1]\nB = cheb2_coeffs_intmat(Float64, 8)\n\n# Get Chebyshev coefficients of sin(x) using cheb2_asmat\nA, _ = cheb2_asmat(Float64, 8)\nx = cheb2_grid(Float64, 8)\nf = sin.(x)\na = A * f  # Chebyshev coefficients of sin(x)\n\n# Compute coefficients of indefinite integral\nb = B * a  # Chebyshev coefficients of -cos(x) + C\n\nSee also: cheb2_grid, cheb2_asmat\n\n\n\n\n\n","category":"method"},{"location":"cheb/#GRSuite.ChebyshevSuite.cheb2_grid-Union{Tuple{TI}, Tuple{TR}, Tuple{Type{TR}, TI}} where {TR<:AbstractFloat, TI<:Integer}","page":"Chebyshev Suite","title":"GRSuite.ChebyshevSuite.cheb2_grid","text":"cheb2_grid(::Type{TR}, n::TI) where {TR<:AbstractFloat,TI<:Integer}\ncheb2_grid(::Type{TR}, n::TI, x_min::TR, x_max::TR) where {TR<:AbstractFloat,TI<:Integer}\n\nGenerate Chebyshev points of the second kind.\n\nArguments\n\nTR: Type parameter for the grid points (e.g., Float64)\nn: Number of grid points\nx_min: (Optional) Lower bound of the mapped interval\nx_max: (Optional) Upper bound of the mapped interval\n\nReturns\n\nVector of n Chebyshev points of the second kind\n\nMathematical Details\n\nFor the standard interval [-1,1]: x_k = -cosleft(frackpin-1right) quad k = 01ldotsn-1\n\nFor mapped interval [xmin,xmax]: x_mapped = fracx_max + x_min2 + fracx_min - x_max2x_k\n\nChebyshev points of the second kind are the extrema of Chebyshev polynomials of the first kind. This includes the endpoints of the interval, making them suitable for boundary value problems.\n\nExamples\n\n# Generate 5 points on [-1,1]\nx = cheb2_grid(Float64, 5)\n\n# Generate 5 points mapped to [0,π]\nx = cheb2_grid(Float64, 5, 0.0, π)\n\n\n\n\n\n","category":"method"},{"location":"cheb/#GRSuite.ChebyshevSuite.cheb2_interp-Union{Tuple{VT3}, Tuple{VT2}, Tuple{VT1}, Tuple{TR}, Tuple{VT1, VT2, VT3, TR}} where {TR<:AbstractFloat, VT1<:AbstractVector{TR}, VT2<:AbstractVector{TR}, VT3<:AbstractVector{TR}}","page":"Chebyshev Suite","title":"GRSuite.ChebyshevSuite.cheb2_interp","text":"cheb2_interp(w::VT1, x::VT2, f::VT3, x0::TR) where {\n    TR<:AbstractFloat,\n    VT1<:AbstractVector{TR},\n    VT2<:AbstractVector{TR},\n    VT3<:AbstractVector{TR},\n}\n\nEvaluate a polynomial interpolant using the barycentric interpolation formula [1].\n\nArguments\n\nw: Vector of barycentric weights\nx: Vector of interpolation points (typically Chebyshev points)\nf: Vector of function values at interpolation points\nx0: Point at which to evaluate the interpolant\n\nReturns\n\nInterpolated value at x0\n\nMathematical Details\n\nThe barycentric interpolation formula is:\n\np(x) = begincases\nf_j  textif  x = x_j text for some  j \nfracsum_j=0^n-1 fracw_jx-x_jf_jsum_j=0^n-1 fracw_jx-x_j  textotherwise\nendcases\n\nThis formula provides a numerically stable way to evaluate the Lagrange interpolation polynomial. When used with Chebyshev points and their corresponding barycentric weights, it gives optimal interpolation properties.\n\nExamples\n\n# Set up interpolation points and weights\nn = 10\nx = cheb2_grid(Float64, n)\nw = cheb2_interp_wts(Float64, n)\n\n# Function to interpolate\nf = sin.(π .* x)\n\n# Evaluate interpolant at a point\nx0 = 0.5\ny = cheb2_interp(w, x, f, x0)\n\nchebfun Reference\n\nchebfun/@chebtech2/bary.m at master · chebfun/chebfun\n\nSee also: cheb2_interp_wts, cheb2_grid\n\n\n\n\n\n","category":"method"},{"location":"cheb/#GRSuite.ChebyshevSuite.cheb2_interp_wts-Union{Tuple{TI}, Tuple{TR}, Tuple{Type{TR}, TI}} where {TR<:AbstractFloat, TI<:Integer}","page":"Chebyshev Suite","title":"GRSuite.ChebyshevSuite.cheb2_interp_wts","text":"cheb2_interp_wts(::Type{TR}, n::TI) where {TR<:AbstractFloat,TI<:Integer}\n\nCompute the barycentric weights for Chebyshev points of the second kind.\n\nArguments\n\nTR: Type parameter for the weights (e.g., Float64)\nn: Number of points\n\nReturns\n\nVector of n barycentric weights\n\nMathematical Details\n\nFor Chebyshev points of the second kind, the barycentric weights are:\n\nw_j = (-1)^j delta_j quad j = 0ldotsn-1\n\nwhere delta_j is defined as:\n\ndelta_j = begincases\n12  j = 0 text or  j = n-1 \n1  textotherwise\nendcases\n\nThese weights are optimized for numerical stability and efficiency in the barycentric interpolation formula.\n\nSee also: cheb2_interp, cheb2_grid\n\n\n\n\n\n","category":"method"},{"location":"cheb/#GRSuite.ChebyshevSuite.cheb2_intmat-Union{Tuple{TI}, Tuple{TR}, Tuple{Type{TR}, TI}} where {TR<:AbstractFloat, TI<:Integer}","page":"Chebyshev Suite","title":"GRSuite.ChebyshevSuite.cheb2_intmat","text":"cheb2_intmat(::Type{TR}, n::TI) where {TR<:AbstractFloat,TI<:Integer}\ncheb2_intmat(::Type{TR}, n::TI, x_min::TR, x_max::TR) where {TR<:AbstractFloat,TI<:Integer}\n\nGenerate the Chebyshev integration matrix that operates directly on function values.\n\nArguments\n\nTR: Type parameter for the matrix elements (e.g., Float64)\nn: Size of the matrix (n×n)\nx_min: (Optional) Lower bound of the integration interval\nx_max: (Optional) Upper bound of the integration interval\n\nReturns\n\nMatrix{TR}: The integration matrix that operates on function values\n\nMathematical Background\n\nThis matrix directly computes the indefinite integral of a function from its values at Chebyshev points. For a function f(x), the integral is computed as:\n\nint f(x)dx = mathbfIf\n\nwhere mathbfI = S B A is the integration matrix composed of:\n\nA: Analysis matrix (transform to spectral coefficients)\nB: Coefficient integration matrix\nS: Synthesis matrix (transform back to physical space)\n\nThis composition allows integration in physical space through:\n\nTransform to spectral space (A)\nIntegrate coefficients (B)\nTransform back to physical space (S)\n\nExamples\n\n# Generate 8×8 integration matrix for [-1,1]\nI = cheb2_intmat(Float64, 8)\n\n# Get function values at Chebyshev points\nx = cheb2_grid(Float64, 8)\nf = sin.(x)\n\n# Compute indefinite integral (-cos(x) + C)\nF = I * f\n\n# Integration matrix for [0,π]\nI_scaled = cheb2_intmat(Float64, 8, 0.0, π)\n\nSee also: cheb2_coeffs_intmat, cheb2_asmat, cheb2_grid\n\n\n\n\n\n","category":"method"},{"location":"cheb/","page":"Chebyshev Suite","title":"Chebyshev Suite","text":"H. E. Salzer. Lagrangian interpolation at the Chebyshev points xn, nuequiv cos (nupi/n), nu= 0 (1) n; some unnoted advantages. The Computer Journal 15, 156–159 (1972).\n\n\n\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GRSuite","category":"page"},{"location":"#GRSuite","page":"Home","title":"GRSuite","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GRSuite.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: AI-Generated Documentation\nMost of the documentation in this package was generated with the assistance of AI. If you find any issues or areas that need clarification, please open an issue on GitHub.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GRSuite]","category":"page"}]
}
